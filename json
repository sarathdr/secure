import com.usage.models.Feature;
import com.usage.models.UsageDataJson;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mockStatic;

public class UsageDataMapperTest {

    @BeforeEach
    public void setup() {
        // Any setup if required for all tests
    }

    @Test
    public void testMap_withValidUsageData() {
        JsonObject usageData = new JsonObject()
                .put("TenantId", "tenant1")
                .put("Clients", new JsonArray().add(
                        new JsonObject()
                                .put("ServerId", new JsonObject().put("Id", "server1"))
                                .put("RequestHostId", new JsonObject().put("Id", "consumer1").put("Type", "type1"))
                                .put("MeteredFeatures", new JsonArray().add(new JsonObject().put("Name", "feature1")))
                                .put("ConcurrentFeatures", new JsonArray().add(new JsonObject().put("Name", "feature2")))
                                .put("LastUpdateTime", 1000L)
                ));

        List<JsonObject> result = UsageDataMapper.map(usageData);

        assertFalse(result.isEmpty());
        assertEquals(2, result.size());
    }

    @Test
    public void testMap_withEmptyFeatures() {
        JsonObject usageData = new JsonObject()
                .put("TenantId", "tenant1")
                .put("Clients", new JsonArray().add(new JsonObject()));

        List<JsonObject> result = UsageDataMapper.map(usageData);

        assertTrue(result.isEmpty());
    }

    @Test
    public void testConvertLineOfStrings() {
        JsonObject jsonObject1 = new JsonObject().put("key", "value1");
        JsonObject jsonObject2 = new JsonObject().put("key", "value2");

        String result = UsageDataMapper.convertLineOfStrings(List.of(jsonObject1, jsonObject2));

        assertEquals("{\"key\":\"value1\"}\n{\"key\":\"value2\"}", result);
    }

    @Test
    public void testGetCorrelationId() {
        JsonObject json = new JsonObject()
                .put("SourceHostId", new JsonObject().put("Id", "host1"))
                .put("LastMessagePublishedTime", "2023-01-01T00:00:00Z");

        try (MockedStatic<UUID> mockedUUID = mockStatic(UUID.class)) {
            mockedUUID.when(UUID::randomUUID).thenReturn(UUID.fromString("123e4567-e89b-12d3-a456-556642440000"));

            String correlationId = UsageDataMapper.getCorrelationId(json);

            assertEquals("host1_2023-01-01T00:00:00Z_123e4567-e89b-12d3-a456-556642440000", correlationId);
        }
    }

    @Test
    public void testGetInstanceId() {
        JsonObject json = new JsonObject().put("SourceHostId", new JsonObject().put("Id", "instance1"));

        String instanceId = UsageDataMapper.getInstanceId(json);

        assertEquals("instance1", instanceId);
    }

    @Test
    public void testGetTenantId() {
        JsonObject json = new JsonObject().put("TenantId", "tenant1");

        String tenantId = UsageDataMapper.getTenantId(json);

        assertEquals("tenant1", tenantId);
    }

    @Test
    public void testMapFeature_withValidFeatures() {
        JsonArray features = new JsonArray()
                .add(new JsonObject().put("Name", "feature1").put("LastConsumeTime", 1000L).put("Type", "standard"));

        List<Feature> result = UsageDataMapper.mapFeature(features, null);

        assertEquals(1, result.size());
        assertEquals("feature1", result.get(0).getItem());
    }

    @Test
    public void testMapFeature_withNullUsageTime() {
        JsonArray features = new JsonArray()
                .add(new JsonObject().put("Name", "feature1").put("Type", "standard"));

        List<Feature> result = UsageDataMapper.mapFeature(features, null);

        assertEquals(1, result.size());
        assertNull(result.get(0).getUsageTime());
    }

    @Test
    public void testGetControlApplied_withPartitionInfo() {
        JsonObject controlApplied = UsageDataMapper.getControlApplied("partition1");

        assertNotNull(controlApplied);
        assertEquals("partition1", controlApplied.getString("partition"));
    }

    @Test
    public void testGetControlApplied_withoutPartitionInfo() {
        JsonObject controlApplied = UsageDataMapper.getControlApplied("");

        assertNull(controlApplied);
    }

    @Test
    public void testConvertJsonArrayToArray() {
        JsonArray jsonArray = new JsonArray().add("value1").add("value2");

        String[] result = UsageDataMapper.convertJsonArrayToArray(jsonArray);

        assertArrayEquals(new String[]{"value1", "value2"}, result);
    }

    @Test
    public void testConvertJsonArrayToArray_withNull() {
        String[] result = UsageDataMapper.convertJsonArrayToArray(null);

        assertNull(result);
    }
}

package com.usage.verticles;

import com.usage.common.AppConfig;
import com.usage.common.Constants;
import com.usage.common.EventBusAddresses;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Handler;
import io.vertx.core.eventbus.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import software.amazon.awssdk.core.async.AsyncRequestBody;
import software.amazon.awssdk.services.s3.S3AsyncClient;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;
import software.amazon.awssdk.services.s3.model.PutObjectResponse;

import java.util.concurrent.CompletableFuture;

public class WriteUsageVerticle extends AbstractVerticle {
    private static final Logger LOG = LoggerFactory.getLogger(WriteUsageVerticle.class);
    private final S3AsyncClient s3AsyncClient;
    private String bucketName;
    private String folderName;

    private WriteUsageVerticle(final S3AsyncClient s3AsyncClient) {
        this.s3AsyncClient = s3AsyncClient;
    }

    public static WriteUsageVerticle create(final S3AsyncClient s3AsyncClient) {
        return new WriteUsageVerticle(s3AsyncClient);
    }

    @Override
    public void start() {
        final var config = config();
        bucketName = config.getString(AppConfig.S3_BUCKET_NAME);
        folderName = config.getString(AppConfig.S3_FOLDER_NAME, "usage");

        vertx.eventBus().consumer(EventBusAddresses.USAGE_REQUEST, handleMessage());
    }

    private Handler<Message<String>> handleMessage() {
        return message -> {
            final String correlationId = message.headers().get(Constants.CORRELATION_ID);

            MDC.put(Constants.CORRELATION_ID, correlationId);
            LOG.trace("Uploading to s3 bucket");

            final String usageString = message.body();
            writeUsageDataAsync(correlationId, usageString).whenComplete(((putObjectResponse, throwable) -> {
                MDC.put(Constants.CORRELATION_ID, correlationId);
                LOG.trace("S3 upload finished");

                if (throwable == null) {
                    message.reply(putObjectResponse.toString());
                    LOG.debug("Usage data has been to send to S3 {}", usageString);
                } else {
                    message.fail(500,
                            "Object hasn't been put to S3 bucket!");
                    LOG.error("Failed to send json to S3 - " + usageString, throwable);
                }

                MDC.remove(Constants.CORRELATION_ID);
            }));

            MDC.remove(Constants.CORRELATION_ID);
        };
    }

    public CompletableFuture<PutObjectResponse> writeUsageDataAsync(final String correlationId, final String usageString) {
        final String fileName = correlationId + ".json";
        final String key = folderName + "/" + fileName;

        final PutObjectRequest objectRequest = PutObjectRequest.builder()
                .bucket(bucketName)
                .key(key)
                .build();

        LOG.debug("Sending Usages: {} to bucket: {}, key: {}", usageString, bucketName, key);
        return s3AsyncClient.putObject(objectRequest, AsyncRequestBody.fromString(usageString));
    }

}

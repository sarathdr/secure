import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.SpecVersion;
import com.usage.common.EventBusAddresses;
import io.vertx.core.Future;
import io.vertx.core.Vertx;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.eventbus.EventBus;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.impl.RoutingContextInternal;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.net.URI;
import java.util.Base64;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class UsageRequestHandlerTest {

    @Mock
    private EventBus eventBus;

    @Mock
    private RoutingContext routingContext;

    @Mock
    private Router router;

    @Mock
    private Message<Object> message;

    private UsageRequestHandler usageRequestHandler;

    @BeforeEach
    public void setup() {
        usageRequestHandler = UsageRequestHandler.create(eventBus);
    }

    @Test
    public void testCreate() {
        assertNotNull(usageRequestHandler);
    }

    @Test
    public void testRegisterHandlers() {
        // Act
        usageRequestHandler.registerHandlers(router);

        // Verify that handlers were registered
        verify(router, times(2)).post(anyString());
    }

    @Test
    public void testValidateJsonBody_Success() throws Exception {
        // Arrange
        when(routingContext.body().asString()).thenReturn("{\"name\":\"test\"}");
        Set validations = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V202012)
                .getSchema(URI.create("classpath:/jsonRequestSchema.json"))
                .validate(new com.fasterxml.jackson.databind.ObjectMapper().readTree("{\"name\":\"test\"}"));

        // Act
        usageRequestHandler.validateJsonBody().handle(routingContext);

        // Assert
        verify(routingContext).next();
    }

    @Test
    public void testValidateJsonBody_Failure() throws Exception {
        // Arrange
        when(routingContext.body().asString()).thenReturn("{\"name\":\"\"}");
        doAnswer(invocation -> {
            routingContext.response().setStatusCode(400).end(new JsonObject().put("errors", new JsonArray().add("error")).toBuffer());
            return null;
        }).when(routingContext).next();

        // Act
        usageRequestHandler.validateJsonBody().handle(routingContext);

        // Assert
        verify(routingContext.response()).setStatusCode(400);
    }

    @Test
    public void testValidateJsonBody_InvalidJson() {
        // Arrange
        when(routingContext.body().asString()).thenThrow(new RuntimeException("Invalid JSON"));

        // Act
        usageRequestHandler.validateJsonBody().handle(routingContext);

        // Assert
        verify(routingContext.response()).setStatusCode(400);
    }

    @Test
    public void testProcessJsonRequest_Success() {
        // Arrange
        when(routingContext.body().buffer()).thenReturn(Buffer.buffer("body-content"));
        when(eventBus.request(anyString(), any(Buffer.class), any(DeliveryOptions.class)))
                .thenReturn(Future.succeededFuture(message));
        when(message.body()).thenReturn(new JsonObject().put("status", "success"));

        // Act
        usageRequestHandler.processJsonRequest().handle(routingContext);

        // Assert
        verify(routingContext.response()).setStatusCode(200);
        verify(routingContext.response()).end(anyString());
    }

    @Test
    public void testProcessJsonRequest_Failure() {
        // Arrange
        when(routingContext.body().buffer()).thenReturn(Buffer.buffer("body-content"));
        when(eventBus.request(anyString(), any(Buffer.class), any(DeliveryOptions.class)))
                .thenReturn(Future.failedFuture(new RuntimeException("Failed processing")));

        // Act
        usageRequestHandler.processJsonRequest().handle(routingContext);

        // Assert
        verify(routingContext).fail(any());
    }

    @Test
    public void testParseFile() {
        // Arrange
        byte[] content = new byte[]{0, 0, 0, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        Buffer buffer = Buffer.buffer(content);
        RoutingContextInternal routingContextInternal = mock(RoutingContextInternal.class);

        when(routingContext.body()).thenReturn(buffer);
        when(routingContext.request()).thenReturn(mock(io.vertx.core.http.HttpServerRequest.class));
        when(routingContextInternal.body()).thenReturn(buffer);

        // Act
        usageRequestHandler.parseFile().handle(routingContextInternal);

        // Assert
        verify(routingContextInternal).setBody(any(Buffer.class));
        verify(routingContext.request().headers()).add(anyString(), anyString());
    }
}

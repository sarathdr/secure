import com.usage.common.AppConfig;
import com.usage.handlers.rest.UsageRequestHandler;
import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.Vertx;
import io.vertx.core.http.HttpServer;
import io.vertx.core.http.HttpServerOptions;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.healthchecks.HealthCheckHandler;
import io.vertx.ext.healthchecks.Status;
import io.vertx.ext.web.Router;
import io.vertx.junit5.VertxExtension;
import io.vertx.junit5.VertxTestContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.slf4j.Logger;

import java.text.MessageFormat;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.*;

@ExtendWith(VertxExtension.class)
public class ServerVerticleTest {

    @Mock
    private Vertx vertx;

    @Mock
    private HttpServer httpServer;

    @Mock
    private AsyncResult<HttpServer> asyncResult;

    @Mock
    private UsageRequestHandler usageRequestHandler;

    private ServerVerticle serverVerticle;

    @BeforeEach
    public void setup(Vertx vertx) {
        serverVerticle = ServerVerticle.create();
        serverVerticle.init(vertx, vertx.getOrCreateContext());
    }

    @Test
    public void testStart(Vertx vertx, VertxTestContext testContext) {
        JsonObject config = new JsonObject()
                .put(AppConfig.HTTP_PORT, 8080)
                .put(AppConfig.CONTEXT_ROUTE, "/api");

        vertx.getOrCreateContext().config().mergeIn(config);
        vertx.deployVerticle(serverVerticle, testContext.succeeding(id -> {
            // Check if the server started successfully
            testContext.completeNow();
        }));
    }

    @Test
    public void testSetupRouter(Vertx vertx) {
        JsonObject config = new JsonObject()
                .put(AppConfig.CONTEXT_ROUTE, "/api");

        vertx.getOrCreateContext().config().mergeIn(config);
        Router router = serverVerticle.setupRouter();

        assertNotNull(router);
    }

    @Test
    public void testSetUpHealthUrl() {
        Router restApiRouter = Router.router(vertx);
        JsonObject config = new JsonObject()
                .put(AppConfig.APP_VERSION, "1.0")
                .put(AppConfig.BUILD_DATE, "2023-01-01")
                .put(AppConfig.GIT_HASH, "abcdef");

        serverVerticle.setUpHealthUrl(restApiRouter, config);

        assertNotNull(restApiRouter.get("/health"));
    }

    @Test
    public void testStartServerSuccess(Vertx vertx, VertxTestContext testContext) {
        Router router = Router.router(vertx);
        Integer port = 8080;

        when(vertx.createHttpServer(any(HttpServerOptions.class))).thenReturn(httpServer);
        when(httpServer.requestHandler(any())).thenReturn(httpServer);
        when(httpServer.listen(anyInt(), any())).thenAnswer(invocation -> {
            ((Handler<AsyncResult<HttpServer>>) invocation.getArgument(1)).handle(Future.succeededFuture(httpServer));
            return httpServer;
        });

        Promise<Void> startPromise = Promise.promise();
        serverVerticle.startServer(startPromise, router, port);

        assertTrue(startPromise.future().succeeded());
        testContext.completeNow();
    }

    @Test
    public void testStartServerFailure(Vertx vertx, VertxTestContext testContext) {
        Router router = Router.router(vertx);
        Integer port = 8080;

        when(vertx.createHttpServer(any(HttpServerOptions.class))).thenReturn(httpServer);
        when(httpServer.requestHandler(any())).thenReturn(httpServer);
        when(httpServer.listen(anyInt(), any())).thenAnswer(invocation -> {
            ((Handler<AsyncResult<HttpServer>>) invocation.getArgument(1)).handle(Future.failedFuture("Server failed to start"));
            return httpServer;
        });

        Promise<Void> startPromise = Promise.promise();
        serverVerticle.startServer(startPromise, router, port);

        assertTrue(startPromise.future().failed());
        testContext.completeNow();
    }

    @Test
    public void testHandleServerStartRespSuccess() {
        Promise<Void> promise = Promise.promise();
        when(asyncResult.succeeded()).thenReturn(true);

        serverVerticle.handleServerStartResp(promise, 8080, asyncResult);

        assertTrue(promise.future().succeeded());
    }

    @Test
    public void testHandleServerStartRespFailure() {
        Promise<Void> promise = Promise.promise();
        when(asyncResult.succeeded()).thenReturn(false);
        when(asyncResult.cause()).thenReturn(new RuntimeException("Server failed"));

        serverVerticle.handleServerStartResp(promise, 8080, asyncResult);

        assertTrue(promise.future().failed());
        assertEquals("Server failed", promise.future().cause().getMessage());
    }
}

package com.usage.handlers.rest;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.SpecVersion;
import com.networknt.schema.ValidationMessage;
import com.usage.common.EventBusAddresses;
import com.usage.utils.Operators;
import io.vertx.core.Handler;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.eventbus.EventBus;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.ext.web.impl.RoutingContextInternal;
import io.vertx.json.schema.SchemaException;

import java.net.URI;
import java.util.Base64;
import java.util.Set;

public class UsageRequestHandler implements RequestHandler {
    private static final JsonSchema VALIDATION_SCHEMA;
    private final ObjectMapper OBJECT_MAPPER = new ObjectMapper();

    static {
        final String REQ_SCHEMA_PATH = "classpath:/jsonRequestSchema.json";
        final JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V202012);
        VALIDATION_SCHEMA = factory.getSchema(URI.create(REQ_SCHEMA_PATH));
    }

    private final EventBus eventBus;


    private UsageRequestHandler(final EventBus eventBus) {
        this.eventBus = eventBus;
    }

    public static UsageRequestHandler create(final EventBus eventBus) {
        return new UsageRequestHandler(eventBus);
    }

    @Override
    public void registerHandlers(final Router router) {
        router.post(ApiPath.API_SYNC_JSON)
                .handler(validateJsonBody())
                .handler(processJsonRequest());

        router.post(ApiPath.API_SYNC_FILE)
                .handler(
                        BodyHandler.create()
                                .setMergeFormAttributes(true)
                                .setDeleteUploadedFilesOnEnd(true)
                )
                .handler(parseFile())
                .handler(validateJsonBody())
                .handler(processJsonRequest());
    }

    private Handler<RoutingContext> validateJsonBody() {
        return (routingContext) -> {
            try {
                final JsonNode jsonNode = OBJECT_MAPPER.readTree(routingContext.body().asString());
                final Set<ValidationMessage> validations = VALIDATION_SCHEMA.validate(jsonNode);

                if (validations.isEmpty()) {
                    routingContext.next();
                } else {
                    final JsonArray errors = new JsonArray();
                    validations.forEach(validationMessage -> errors.add(validationMessage.getMessage()));

                    routingContext.response()
                            .setStatusCode(400)
                            .putHeader(CONTENT_TYPE, JSON_CONTENT)
                            .end(JsonObject.of(ERR_MESSAGE_KEY, errors).toBuffer());
                }

            } catch (SchemaException | ClassCastException | JsonProcessingException e) {
                final JsonArray errors = new JsonArray();
                final JsonObject error = JsonObject.of(ERR_MESSAGE_KEY, errors.add("Invalid json request. " + e.getMessage()));

                routingContext.response()
                        .setStatusCode(400)
                        .putHeader(CONTENT_TYPE, JSON_CONTENT)
                        .end(error.toBuffer());
            }
        };
    }

    private Handler<RoutingContext> processJsonRequest() {
        return (routingContext) -> {
            final DeliveryOptions deliveryOptions = new DeliveryOptions()
                    .addHeader(SIGNATURE_HEADER, routingContext.request().getHeader(SIGNATURE_HEADER));

            eventBus.request(EventBusAddresses.PROCESS_SYNC_MESSAGE, routingContext.body().buffer(), deliveryOptions)
                    .onSuccess(resp -> {
                        final JsonObject response = (JsonObject) resp.body();

                        routingContext.response()
                                .putHeader(CONTENT_TYPE, JSON_CONTENT)
                                .setStatusCode(200)
                                .end(response.toString());
                    })
                    .onFailure((error) -> {
                        routingContext.fail(error.getCause());
                    });
        };

    }

    private Handler<RoutingContext> parseFile() {
        return (routingContext) -> {
            final Buffer buffer = routingContext.body().buffer();
            final byte[] signatureLength = buffer.getBytes(0, 4);
            final int sigLength = Operators.byteArrayToInt(signatureLength);

            final byte[] signature = buffer.getBytes(4, sigLength + 4);
            final byte[] json = buffer.getBytes(4 + sigLength, buffer.length());

            ((RoutingContextInternal) routingContext).setBody(Buffer.buffer(json));
            routingContext.request().headers().add(SIGNATURE_HEADER, Base64.getEncoder().encodeToString(signature));

            routingContext.next();
        };
    }
}

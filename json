package com.usage;

import com.usage.config.ConfigLoader;
import com.usage.verticles.services.ApiService;
import com.usage.verticles.services.RabbitMQService;
import com.usage.verticles.services.SyncMessageService;
import com.usage.verticles.services.VerticleService;
import com.usage.verticles.services.WriteUsageService;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.logging.SLF4JLogDelegateFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class UsageApp extends AbstractVerticle {
    private static final Logger LOG = LoggerFactory.getLogger(UsageApp.class);
    private static final int INSTANCES = 2 * Runtime.getRuntime().availableProcessors();

    private final List<VerticleService> services = new ArrayList<>();

    public List<VerticleService> getServices() {
        if (services.isEmpty()) {
            services.add(RabbitMQService.getInstance(INSTANCES));
            services.add(WriteUsageService.getInstance(INSTANCES));
            services.add(ApiService.getInstance(INSTANCES));
            services.add(SyncMessageService.getInstance(INSTANCES));
        }

        return services;
    }

    @Override
    public void start(final Promise<Void> startPromise) {
        configureLogging();
        ConfigLoader.get().load(vertx)
                .compose((jsonConfig) -> {
                    LOG.debug("Config loaded" + jsonConfig.toString());

                    return Future.all(
                            getServices()
                                    .stream()
                                    .map(service -> service.deploy(vertx, jsonConfig))
                                    .collect(Collectors.toList())
                    );
                })
                .onSuccess(resul -> {
                    LOG.info("Service deployment completed");
                    startPromise.complete();
                })
                .onFailure((err) -> {
                    LOG.error("Unable to deploy services.", err);
                    startPromise.fail(err);
                });

        //register hook for when jvm shuts down to correctly stop all verticles
        Runtime.getRuntime().addShutdownHook(new Thread(() -> vertx.close()));
    }

    @Override
    public void stop(Promise<Void> stopPromise) {
        Future.all(getServices()
                        .stream()
                        .map(VerticleService::teardown)
                        .collect(Collectors.toList())
                )
                .onSuccess((r) -> stopPromise.complete())
                .onFailure(e -> {
                    LOG.error("Failed to stop the services", e);
                    stopPromise.fail(e);
                });
    }

    private void configureLogging() {
        // set vertx logger delegate factory to slf4j
        final String logFactory = System.getProperty("org.vertx.logger-delegate-factory-class-name");
        if (logFactory == null) {
            System.setProperty("org.vertx.logger-delegate-factory-class-name", SLF4JLogDelegateFactory.class.getName());
        }
    }
}

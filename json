package com.usage.verticles.services;

import com.usage.annotations.ExcludeFromJacocoGeneratedReport;
import com.usage.common.AppConfig;
import com.usage.verticles.WriteUsageVerticle;
import io.vertx.core.DeploymentOptions;
import io.vertx.core.Future;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3AsyncClient;
import software.amazon.awssdk.services.s3.S3AsyncClientBuilder;

import java.net.URI;

public class WriteUsageService extends DeployVerticleService {
    private static final Logger LOG = LoggerFactory.getLogger(WriteUsageService.class);
    private static final String SERVICE_NAME = "WriteUsageService";

    private static WriteUsageService INSTANCE;

    private WriteUsageService(final int instances) {
        super(instances);
    }

    public static WriteUsageService getInstance(final int instances) {
        if (INSTANCE == null) {
            INSTANCE = new WriteUsageService(instances);
        }

        return INSTANCE;
    }

    @Override
    public Future<Boolean> deploy(Vertx vertx, JsonObject config) {

        return vertx.deployVerticle(
                () -> WriteUsageVerticle.create(createAsyncS3Client(config)),
                new DeploymentOptions()
                        .setConfig(config)
                        .setInstances(getInstanceCount())
        ).compose(
                result -> {
                    LOG.info("{} successfully deployed", getServiceName());
                    setServiceStatus(ServiceStatus.ACTIVE);
                    return Future.succeededFuture(true);
                }
        );
    }


    @ExcludeFromJacocoGeneratedReport
    private S3AsyncClient createAsyncS3Client(final JsonObject config) {
        final String region = config.getString(AppConfig.AWS_REGION);
        final String s3Endpoint = config.getString(AppConfig.S3_ENDPOINT);

        final S3AsyncClientBuilder builder = S3AsyncClient.builder()
                .forcePathStyle(true);
        if (region != null && !region.isEmpty()) {
            builder.region(Region.of(region));
        }

        if (s3Endpoint != null && !s3Endpoint.isEmpty()) {
            builder.endpointOverride(URI.create(s3Endpoint));
        }

        return builder.build();
    }


    @Override
    public String getServiceName() {
        return SERVICE_NAME;
    }
}

package com.usage.handlers.rest.services;

import com.flexnet.lfs.webservice.FulfillmentServiceInterface;
import com.flexnet.lfs.webservice.GetIdentityRequest;
import com.flexnet.lfs.webservice.GetIdentityResponse;
import com.flexnet.lfs.webservice.IdentityType;
import com.flexnet.lm.binary.PublisherIdentityRecord;
import com.flexnet.lm.signer.Signer;
import com.flexnet.lm.signer.SignerFactory;
import com.usage.models.SignatureCredential;
import io.vertx.core.Future;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WebServiceSignatureValidator implements SignatureValidator {
    private static final Logger LOG = LoggerFactory.getLogger(WebServiceSignatureValidator.class);
    private FulfillmentServiceInterface soapClient;

    private WebServiceSignatureValidator(final String serviceUrl) {
        soapClient = createSoapClient(serviceUrl);
    }

    public static WebServiceSignatureValidator create(final String serviceUrl) {
        return new WebServiceSignatureValidator(serviceUrl);
    }

    @Override
    public Future<Boolean> validateSignature(final SignatureCredential credential) {

        final GetIdentityRequest request = new GetIdentityRequest();
        request.setPublisherId(credential.getTenantId());
        request.setPublisherName(credential.getVendorName());
        request.setSignatureName(credential.getIdentityName());
        request.setIdentityType(IdentityType.CLIENT_SERVER);

        try {
            final GetIdentityResponse response = soapClient.getIdentity(request);
            byte[] identityData = response.getPublisherIdentity().getBinaryIdentity();
            final PublisherIdentityRecord identity = new PublisherIdentityRecord();

            try {
                identity.parseAll(identityData);

                final Signer signer = SignerFactory.getInstance(identity, SignerFactory.SignatureType.CLIENT_SERVER);
                signer.initVerify();
                byte[] data = credential.getUsageData();

                for (byte jsonByte : data) {
                    signer.update(jsonByte & 0xFF);
                }

                return Future.succeededFuture(signer.isSignatureValid(credential.getSignature()));
            } catch (Exception e) {
                LOG.error("Failed to validate signature", e);
                return Future.failedFuture(e);
            }

        } catch (Exception e) {
            LOG.error("Failed to read signature", e);
            return Future.failedFuture(e);
        }

    }

    private FulfillmentServiceInterface createSoapClient(final String serviceUrl) {
        final JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
        factory.setServiceClass(FulfillmentServiceInterface.class);
        factory.setAddress(serviceUrl);
        return (FulfillmentServiceInterface) factory.create();
    }
}

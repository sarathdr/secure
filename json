dependencies {
    implementation 'io.vertx:vertx-core:4.4.3'
    implementation 'org.apache.cxf:cxf-rt-frontend-jaxws:3.5.6'
    implementation 'org.apache.cxf:cxf-rt-transports-http:3.5.6'
}


import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.Vertx;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import com.example.soapclient.YourService; // Replace with your generated service interface

public class SoapClientVerticle extends AbstractVerticle {

    private YourService soapClient;

    @Override
    public void start() {
        // Create the CXF client
        soapClient = createSoapClient("http://example.com/service"); // Replace with your service URL

        // Example usage of the SOAP client
        vertx.createHttpServer().requestHandler(req -> {
            // Run the SOAP call on a worker thread
            vertx.executeBlocking(promise -> {
                try {
                    // Replace with your SOAP method call
                    String result = soapClient.yourSoapMethod("parameter");
                    promise.complete(result);
                } catch (Exception e) {
                    promise.fail(e);
                }
            }, res -> {
                if (res.succeeded()) {
                    req.response().end("SOAP Response: " + res.result());
                } else {
                    req.response().setStatusCode(500).end("Error: " + res.cause().getMessage());
                }
            });
        }).listen(8080);
    }

    private YourService createSoapClient(String serviceUrl) {
        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
        factory.setServiceClass(YourService.class); // Replace with your generated service interface
        factory.setAddress(serviceUrl);
        return (YourService) factory.create();
    }

    public static void main(String[] args) {
        Vertx vertx = Vertx.vertx();
        vertx.deployVerticle(new SoapClientVerticle());
    }
}


wsdl2java -d src/main/java -p com.example.soapclient http://example.com/service?wsdl





task generateSoapClient {
    def wsdlFile = file('src/main/resources/your-service.wsdl') // Path to your local WSDL file
    def outputDir = file("${projectDir}/build/generated-sources/java") // Output directory for generated Java classes
    def packageName = 'com.example.soapclient' // Replace with your desired package name

    doLast {
        // Ensure the output directory exists
        outputDir.mkdirs()

        // Configure the command line arguments for wsdl2java
        def wsdl2javaArgs = [
                'java', '-cp', configurations.compileClasspath.asPath,
                'org.apache.cxf.tools.wsdlto.WSDLToJava',
                '-d', outputDir,
                '-p', packageName,
                '-client',
                wsdlFile.absolutePath // Use the local WSDL file path
        ]

        // Run the wsdl2java command
        exec {
            commandLine wsdl2javaArgs
        }
    }
}

compileJava.dependsOn generateSoapClient

sourceSets.main.java.srcDir file('build/generated-sources/java') // Include generated sources in the compile step

jar {
    archiveBaseName = 'wsdl-client'
    from sourceSets.main.output
}

